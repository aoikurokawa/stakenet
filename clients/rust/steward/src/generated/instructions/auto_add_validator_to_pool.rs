//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct AutoAddValidatorToPool {
    pub config: solana_program::pubkey::Pubkey,

    pub steward_state: solana_program::pubkey::Pubkey,

    pub validator_history_account: solana_program::pubkey::Pubkey,

    pub stake_pool: solana_program::pubkey::Pubkey,

    pub reserve_stake: solana_program::pubkey::Pubkey,

    pub withdraw_authority: solana_program::pubkey::Pubkey,

    pub validator_list: solana_program::pubkey::Pubkey,

    pub stake_account: solana_program::pubkey::Pubkey,

    pub vote_account: solana_program::pubkey::Pubkey,

    pub stake_history: solana_program::pubkey::Pubkey,

    pub stake_config: solana_program::pubkey::Pubkey,

    pub stake_program: solana_program::pubkey::Pubkey,

    pub stake_pool_program: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,

    pub rent: solana_program::pubkey::Pubkey,

    pub clock: solana_program::pubkey::Pubkey,
}

impl AutoAddValidatorToPool {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(16 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.steward_state,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.validator_history_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.stake_pool,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.reserve_stake,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.withdraw_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.validator_list,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.stake_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.vote_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.stake_history,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.stake_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.stake_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.stake_pool_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.clock, false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = AutoAddValidatorToPoolInstructionData::new()
            .try_to_vec()
            .unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::STEWARD_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct AutoAddValidatorToPoolInstructionData {
    discriminator: [u8; 8],
}

impl AutoAddValidatorToPoolInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [166, 226, 7, 8, 169, 239, 220, 69],
        }
    }
}

impl Default for AutoAddValidatorToPoolInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

/// Instruction builder for `AutoAddValidatorToPool`.
///
/// ### Accounts:
///
///   0. `[]` config
///   1. `[writable]` steward_state
///   2. `[]` validator_history_account
///   3. `[writable]` stake_pool
///   4. `[writable]` reserve_stake
///   5. `[]` withdraw_authority
///   6. `[writable]` validator_list
///   7. `[writable]` stake_account
///   8. `[]` vote_account
///   9. `[]` stake_history
///   10. `[]` stake_config
///   11. `[]` stake_program
///   12. `[]` stake_pool_program
///   13. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   14. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
///   15. `[]` clock
#[derive(Clone, Debug, Default)]
pub struct AutoAddValidatorToPoolBuilder {
    config: Option<solana_program::pubkey::Pubkey>,
    steward_state: Option<solana_program::pubkey::Pubkey>,
    validator_history_account: Option<solana_program::pubkey::Pubkey>,
    stake_pool: Option<solana_program::pubkey::Pubkey>,
    reserve_stake: Option<solana_program::pubkey::Pubkey>,
    withdraw_authority: Option<solana_program::pubkey::Pubkey>,
    validator_list: Option<solana_program::pubkey::Pubkey>,
    stake_account: Option<solana_program::pubkey::Pubkey>,
    vote_account: Option<solana_program::pubkey::Pubkey>,
    stake_history: Option<solana_program::pubkey::Pubkey>,
    stake_config: Option<solana_program::pubkey::Pubkey>,
    stake_program: Option<solana_program::pubkey::Pubkey>,
    stake_pool_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    rent: Option<solana_program::pubkey::Pubkey>,
    clock: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl AutoAddValidatorToPoolBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn config(&mut self, config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.config = Some(config);
        self
    }
    #[inline(always)]
    pub fn steward_state(&mut self, steward_state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.steward_state = Some(steward_state);
        self
    }
    #[inline(always)]
    pub fn validator_history_account(
        &mut self,
        validator_history_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.validator_history_account = Some(validator_history_account);
        self
    }
    #[inline(always)]
    pub fn stake_pool(&mut self, stake_pool: solana_program::pubkey::Pubkey) -> &mut Self {
        self.stake_pool = Some(stake_pool);
        self
    }
    #[inline(always)]
    pub fn reserve_stake(&mut self, reserve_stake: solana_program::pubkey::Pubkey) -> &mut Self {
        self.reserve_stake = Some(reserve_stake);
        self
    }
    #[inline(always)]
    pub fn withdraw_authority(
        &mut self,
        withdraw_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.withdraw_authority = Some(withdraw_authority);
        self
    }
    #[inline(always)]
    pub fn validator_list(&mut self, validator_list: solana_program::pubkey::Pubkey) -> &mut Self {
        self.validator_list = Some(validator_list);
        self
    }
    #[inline(always)]
    pub fn stake_account(&mut self, stake_account: solana_program::pubkey::Pubkey) -> &mut Self {
        self.stake_account = Some(stake_account);
        self
    }
    #[inline(always)]
    pub fn vote_account(&mut self, vote_account: solana_program::pubkey::Pubkey) -> &mut Self {
        self.vote_account = Some(vote_account);
        self
    }
    #[inline(always)]
    pub fn stake_history(&mut self, stake_history: solana_program::pubkey::Pubkey) -> &mut Self {
        self.stake_history = Some(stake_history);
        self
    }
    #[inline(always)]
    pub fn stake_config(&mut self, stake_config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.stake_config = Some(stake_config);
        self
    }
    #[inline(always)]
    pub fn stake_program(&mut self, stake_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.stake_program = Some(stake_program);
        self
    }
    #[inline(always)]
    pub fn stake_pool_program(
        &mut self,
        stake_pool_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.stake_pool_program = Some(stake_pool_program);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }
    #[inline(always)]
    pub fn clock(&mut self, clock: solana_program::pubkey::Pubkey) -> &mut Self {
        self.clock = Some(clock);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = AutoAddValidatorToPool {
            config: self.config.expect("config is not set"),
            steward_state: self.steward_state.expect("steward_state is not set"),
            validator_history_account: self
                .validator_history_account
                .expect("validator_history_account is not set"),
            stake_pool: self.stake_pool.expect("stake_pool is not set"),
            reserve_stake: self.reserve_stake.expect("reserve_stake is not set"),
            withdraw_authority: self
                .withdraw_authority
                .expect("withdraw_authority is not set"),
            validator_list: self.validator_list.expect("validator_list is not set"),
            stake_account: self.stake_account.expect("stake_account is not set"),
            vote_account: self.vote_account.expect("vote_account is not set"),
            stake_history: self.stake_history.expect("stake_history is not set"),
            stake_config: self.stake_config.expect("stake_config is not set"),
            stake_program: self.stake_program.expect("stake_program is not set"),
            stake_pool_program: self
                .stake_pool_program
                .expect("stake_pool_program is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            rent: self.rent.unwrap_or(solana_program::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
            clock: self.clock.expect("clock is not set"),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `auto_add_validator_to_pool` CPI accounts.
pub struct AutoAddValidatorToPoolCpiAccounts<'a, 'b> {
    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub steward_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub validator_history_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub reserve_stake: &'b solana_program::account_info::AccountInfo<'a>,

    pub withdraw_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub validator_list: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub vote_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_history: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_pool_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,

    pub clock: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `auto_add_validator_to_pool` CPI instruction.
pub struct AutoAddValidatorToPoolCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub steward_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub validator_history_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub reserve_stake: &'b solana_program::account_info::AccountInfo<'a>,

    pub withdraw_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub validator_list: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub vote_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_history: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub stake_pool_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,

    pub clock: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> AutoAddValidatorToPoolCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: AutoAddValidatorToPoolCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            config: accounts.config,
            steward_state: accounts.steward_state,
            validator_history_account: accounts.validator_history_account,
            stake_pool: accounts.stake_pool,
            reserve_stake: accounts.reserve_stake,
            withdraw_authority: accounts.withdraw_authority,
            validator_list: accounts.validator_list,
            stake_account: accounts.stake_account,
            vote_account: accounts.vote_account,
            stake_history: accounts.stake_history,
            stake_config: accounts.stake_config,
            stake_program: accounts.stake_program,
            stake_pool_program: accounts.stake_pool_program,
            system_program: accounts.system_program,
            rent: accounts.rent,
            clock: accounts.clock,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(16 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.steward_state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.validator_history_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.stake_pool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.reserve_stake.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.withdraw_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.validator_list.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.stake_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.vote_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.stake_history.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.stake_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.stake_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.stake_pool_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.clock.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = AutoAddValidatorToPoolInstructionData::new()
            .try_to_vec()
            .unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::STEWARD_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(17 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.config.clone());
        account_infos.push(self.steward_state.clone());
        account_infos.push(self.validator_history_account.clone());
        account_infos.push(self.stake_pool.clone());
        account_infos.push(self.reserve_stake.clone());
        account_infos.push(self.withdraw_authority.clone());
        account_infos.push(self.validator_list.clone());
        account_infos.push(self.stake_account.clone());
        account_infos.push(self.vote_account.clone());
        account_infos.push(self.stake_history.clone());
        account_infos.push(self.stake_config.clone());
        account_infos.push(self.stake_program.clone());
        account_infos.push(self.stake_pool_program.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.rent.clone());
        account_infos.push(self.clock.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `AutoAddValidatorToPool` via CPI.
///
/// ### Accounts:
///
///   0. `[]` config
///   1. `[writable]` steward_state
///   2. `[]` validator_history_account
///   3. `[writable]` stake_pool
///   4. `[writable]` reserve_stake
///   5. `[]` withdraw_authority
///   6. `[writable]` validator_list
///   7. `[writable]` stake_account
///   8. `[]` vote_account
///   9. `[]` stake_history
///   10. `[]` stake_config
///   11. `[]` stake_program
///   12. `[]` stake_pool_program
///   13. `[]` system_program
///   14. `[]` rent
///   15. `[]` clock
#[derive(Clone, Debug)]
pub struct AutoAddValidatorToPoolCpiBuilder<'a, 'b> {
    instruction: Box<AutoAddValidatorToPoolCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> AutoAddValidatorToPoolCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(AutoAddValidatorToPoolCpiBuilderInstruction {
            __program: program,
            config: None,
            steward_state: None,
            validator_history_account: None,
            stake_pool: None,
            reserve_stake: None,
            withdraw_authority: None,
            validator_list: None,
            stake_account: None,
            vote_account: None,
            stake_history: None,
            stake_config: None,
            stake_program: None,
            stake_pool_program: None,
            system_program: None,
            rent: None,
            clock: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn config(
        &mut self,
        config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config = Some(config);
        self
    }
    #[inline(always)]
    pub fn steward_state(
        &mut self,
        steward_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.steward_state = Some(steward_state);
        self
    }
    #[inline(always)]
    pub fn validator_history_account(
        &mut self,
        validator_history_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.validator_history_account = Some(validator_history_account);
        self
    }
    #[inline(always)]
    pub fn stake_pool(
        &mut self,
        stake_pool: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.stake_pool = Some(stake_pool);
        self
    }
    #[inline(always)]
    pub fn reserve_stake(
        &mut self,
        reserve_stake: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.reserve_stake = Some(reserve_stake);
        self
    }
    #[inline(always)]
    pub fn withdraw_authority(
        &mut self,
        withdraw_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.withdraw_authority = Some(withdraw_authority);
        self
    }
    #[inline(always)]
    pub fn validator_list(
        &mut self,
        validator_list: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.validator_list = Some(validator_list);
        self
    }
    #[inline(always)]
    pub fn stake_account(
        &mut self,
        stake_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.stake_account = Some(stake_account);
        self
    }
    #[inline(always)]
    pub fn vote_account(
        &mut self,
        vote_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vote_account = Some(vote_account);
        self
    }
    #[inline(always)]
    pub fn stake_history(
        &mut self,
        stake_history: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.stake_history = Some(stake_history);
        self
    }
    #[inline(always)]
    pub fn stake_config(
        &mut self,
        stake_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.stake_config = Some(stake_config);
        self
    }
    #[inline(always)]
    pub fn stake_program(
        &mut self,
        stake_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.stake_program = Some(stake_program);
        self
    }
    #[inline(always)]
    pub fn stake_pool_program(
        &mut self,
        stake_pool_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.stake_pool_program = Some(stake_pool_program);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }
    #[inline(always)]
    pub fn clock(&mut self, clock: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.clock = Some(clock);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = AutoAddValidatorToPoolCpi {
            __program: self.instruction.__program,

            config: self.instruction.config.expect("config is not set"),

            steward_state: self
                .instruction
                .steward_state
                .expect("steward_state is not set"),

            validator_history_account: self
                .instruction
                .validator_history_account
                .expect("validator_history_account is not set"),

            stake_pool: self.instruction.stake_pool.expect("stake_pool is not set"),

            reserve_stake: self
                .instruction
                .reserve_stake
                .expect("reserve_stake is not set"),

            withdraw_authority: self
                .instruction
                .withdraw_authority
                .expect("withdraw_authority is not set"),

            validator_list: self
                .instruction
                .validator_list
                .expect("validator_list is not set"),

            stake_account: self
                .instruction
                .stake_account
                .expect("stake_account is not set"),

            vote_account: self
                .instruction
                .vote_account
                .expect("vote_account is not set"),

            stake_history: self
                .instruction
                .stake_history
                .expect("stake_history is not set"),

            stake_config: self
                .instruction
                .stake_config
                .expect("stake_config is not set"),

            stake_program: self
                .instruction
                .stake_program
                .expect("stake_program is not set"),

            stake_pool_program: self
                .instruction
                .stake_pool_program
                .expect("stake_pool_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            rent: self.instruction.rent.expect("rent is not set"),

            clock: self.instruction.clock.expect("clock is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct AutoAddValidatorToPoolCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    steward_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    validator_history_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    stake_pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    reserve_stake: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    withdraw_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    validator_list: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    stake_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vote_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    stake_history: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    stake_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    stake_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    stake_pool_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    clock: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
