//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Parameters {
    /// Number of epochs to consider for MEV commission
    pub mev_commission_range: u16,
    /// Number of epochs to consider for epoch credits
    pub epoch_credits_range: u16,
    /// Number of epochs to consider for commission
    pub commission_range: u16,
    /// Highest MEV commission rate allowed in bps
    pub mev_commission_bps_threshold: u16,
    /// Proportion of delinquent slots to total slots to trigger delinquency measurement in scoring
    pub scoring_delinquency_threshold_ratio: f64,
    /// Proportion of delinquent slots to total slots to trigger instant unstake
    pub instant_unstake_delinquency_threshold_ratio: f64,
    /// Highest commission rate allowed in commission_range epochs, in percent
    pub commission_threshold: u8,
    /// Highest commission rate allowed in tracked history
    pub historical_commission_threshold: u8,
    /// Required so that the struct is 8-byte aligned
    /// https://doc.rust-lang.org/reference/type-layout.html#reprc-structs
    pub padding0: [u8; 6],
    /// Number of validators to delegate to
    pub num_delegation_validators: u32,
    /// Maximum amount of the pool to be unstaked in a cycle for scoring (in basis points)
    pub scoring_unstake_cap_bps: u32,
    pub instant_unstake_cap_bps: u32,
    /// Maximum amount of the pool to be unstaked in a cycle from stake deposits (in basis points)
    pub stake_deposit_unstake_cap_bps: u32,
    /// Number of slots that scoring must be completed in
    pub compute_score_slot_range: u64,
    /// Progress in epoch before instant unstake is allowed
    pub instant_unstake_epoch_progress: f64,
    /// Validator history copy_vote_account and Cluster History must be updated past this epoch progress before calculating instant unstake
    pub instant_unstake_inputs_epoch_progress: f64,
    /// Number of epochs a given validator set will be delegated to before recomputing scores
    pub num_epochs_between_scoring: u64,
    /// Minimum stake required to be added to pool ValidatorList and eligible for delegation
    pub minimum_stake_lamports: u64,
    /// Minimum epochs voting required to be in the pool ValidatorList and eligible for delegation
    pub minimum_voting_epochs: u64,
    pub padding1: [u64; 32],
}
