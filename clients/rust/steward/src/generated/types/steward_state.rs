//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::generated::types::BitMask;
use crate::generated::types::Delegation;
use crate::generated::types::StewardStateEnum;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Tracks state of the stake pool.
/// Follow state transitions here:
/// https://github.com/jito-foundation/stakenet/blob/master/programs/steward/state-machine-diagram.png
#[derive(BorshSerialize, BorshDeserialize, Clone, Debug)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct StewardState {
    /// Current state of the Steward
    pub state_tag: StewardStateEnum,
    /// Internal lamport balance of each validator, used to track stake deposits that need to be unstaked,
    /// so not always equal to the stake account balance.
    #[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::Bytes>"))]
    pub validator_lamport_balances: [u64; 5000],
    /// Overall score of validator, used to determine delegates and order for delegation.
    #[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::Bytes>"))]
    pub scores: [u32; 5000],
    /// Indices of validators, sorted by score descending
    #[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::Bytes>"))]
    pub sorted_score_indices: [u16; 5000],
    /// Yield component of the score. Used as secondary priority, to determine order for unstaking.
    #[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::Bytes>"))]
    pub yield_scores: [u32; 5000],
    /// Indices of validators, sorted by yield score descending
    #[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::Bytes>"))]
    pub sorted_yield_score_indices: [u16; 5000],
    /// Target share of pool represented as a proportion, indexed by spl_stake_pool::ValidatorList index
    #[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::Bytes>"))]
    pub delegations: [Delegation; 5000],
    /// Each bit represents a validator, true if validator should be unstaked
    pub instant_unstake: BitMask,
    /// Tracks progress of states that require one instruction per validator
    pub progress: BitMask,
    /// Marks a validator for immediate removal after `remove_validator_from_pool` has been called on the stake pool
    /// This happens when a validator is able to be removed within the same epoch as it was marked
    pub validators_for_immediate_removal: BitMask,
    /// Marks a validator for removal after `remove_validator_from_pool` has been called on the stake pool
    /// This is cleaned up in the next epoch
    pub validators_to_remove: BitMask,
    /// Slot of the first ComputeScores instruction in the current cycle
    pub start_computing_scores_slot: u64,
    /// Internal current epoch, for tracking when epoch has changed
    pub current_epoch: u64,
    /// Next cycle start
    pub next_cycle_epoch: u64,
    /// Number of validators in the stake pool, used to determine the number of validators to be scored.
    /// Updated at the start of each cycle and when validators are removed.
    pub num_pool_validators: u64,
    /// Total lamports that have been due to scoring this cycle
    pub scoring_unstake_total: u64,
    /// Total lamports that have been due to instant unstaking this cycle
    pub instant_unstake_total: u64,
    /// Total lamports that have been due to stake deposits this cycle
    pub stake_deposit_unstake_total: u64,
    /// Flags to track state transitions and operations
    pub status_flags: u32,
    /// Number of validators added to the pool in the current cycle
    pub validators_added: u16,
    /// Future state and #[repr(C)] alignment
    #[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::Bytes>"))]
    pub padding0: [u8; 40002],
}
