//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct BackfillTotalBlocks {
    pub cluster_history_account: solana_program::pubkey::Pubkey,

    pub config: solana_program::pubkey::Pubkey,

    pub oracle_authority: solana_program::pubkey::Pubkey,
}

impl BackfillTotalBlocks {
    pub fn instruction(
        &self,
        args: BackfillTotalBlocksInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: BackfillTotalBlocksInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.cluster_history_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.oracle_authority,
            true,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = BackfillTotalBlocksInstructionData::new()
            .try_to_vec()
            .unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::VALIDATOR_HISTORY_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct BackfillTotalBlocksInstructionData {
    discriminator: [u8; 8],
}

impl BackfillTotalBlocksInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [223, 59, 120, 117, 34, 248, 117, 220],
        }
    }
}

impl Default for BackfillTotalBlocksInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct BackfillTotalBlocksInstructionArgs {
    pub epoch: u64,
    pub blocks_in_epoch: u32,
}

/// Instruction builder for `BackfillTotalBlocks`.
///
/// ### Accounts:
///
///   0. `[writable]` cluster_history_account
///   1. `[]` config
///   2. `[writable, signer]` oracle_authority
#[derive(Clone, Debug, Default)]
pub struct BackfillTotalBlocksBuilder {
    cluster_history_account: Option<solana_program::pubkey::Pubkey>,
    config: Option<solana_program::pubkey::Pubkey>,
    oracle_authority: Option<solana_program::pubkey::Pubkey>,
    epoch: Option<u64>,
    blocks_in_epoch: Option<u32>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl BackfillTotalBlocksBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn cluster_history_account(
        &mut self,
        cluster_history_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.cluster_history_account = Some(cluster_history_account);
        self
    }
    #[inline(always)]
    pub fn config(&mut self, config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.config = Some(config);
        self
    }
    #[inline(always)]
    pub fn oracle_authority(
        &mut self,
        oracle_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.oracle_authority = Some(oracle_authority);
        self
    }
    #[inline(always)]
    pub fn epoch(&mut self, epoch: u64) -> &mut Self {
        self.epoch = Some(epoch);
        self
    }
    #[inline(always)]
    pub fn blocks_in_epoch(&mut self, blocks_in_epoch: u32) -> &mut Self {
        self.blocks_in_epoch = Some(blocks_in_epoch);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = BackfillTotalBlocks {
            cluster_history_account: self
                .cluster_history_account
                .expect("cluster_history_account is not set"),
            config: self.config.expect("config is not set"),
            oracle_authority: self.oracle_authority.expect("oracle_authority is not set"),
        };
        let args = BackfillTotalBlocksInstructionArgs {
            epoch: self.epoch.clone().expect("epoch is not set"),
            blocks_in_epoch: self
                .blocks_in_epoch
                .clone()
                .expect("blocks_in_epoch is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `backfill_total_blocks` CPI accounts.
pub struct BackfillTotalBlocksCpiAccounts<'a, 'b> {
    pub cluster_history_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub oracle_authority: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `backfill_total_blocks` CPI instruction.
pub struct BackfillTotalBlocksCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub cluster_history_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub oracle_authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: BackfillTotalBlocksInstructionArgs,
}

impl<'a, 'b> BackfillTotalBlocksCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: BackfillTotalBlocksCpiAccounts<'a, 'b>,
        args: BackfillTotalBlocksInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            cluster_history_account: accounts.cluster_history_account,
            config: accounts.config,
            oracle_authority: accounts.oracle_authority,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.cluster_history_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.oracle_authority.key,
            true,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = BackfillTotalBlocksInstructionData::new()
            .try_to_vec()
            .unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::VALIDATOR_HISTORY_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(4 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.cluster_history_account.clone());
        account_infos.push(self.config.clone());
        account_infos.push(self.oracle_authority.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `BackfillTotalBlocks` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` cluster_history_account
///   1. `[]` config
///   2. `[writable, signer]` oracle_authority
#[derive(Clone, Debug)]
pub struct BackfillTotalBlocksCpiBuilder<'a, 'b> {
    instruction: Box<BackfillTotalBlocksCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> BackfillTotalBlocksCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(BackfillTotalBlocksCpiBuilderInstruction {
            __program: program,
            cluster_history_account: None,
            config: None,
            oracle_authority: None,
            epoch: None,
            blocks_in_epoch: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn cluster_history_account(
        &mut self,
        cluster_history_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cluster_history_account = Some(cluster_history_account);
        self
    }
    #[inline(always)]
    pub fn config(
        &mut self,
        config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config = Some(config);
        self
    }
    #[inline(always)]
    pub fn oracle_authority(
        &mut self,
        oracle_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.oracle_authority = Some(oracle_authority);
        self
    }
    #[inline(always)]
    pub fn epoch(&mut self, epoch: u64) -> &mut Self {
        self.instruction.epoch = Some(epoch);
        self
    }
    #[inline(always)]
    pub fn blocks_in_epoch(&mut self, blocks_in_epoch: u32) -> &mut Self {
        self.instruction.blocks_in_epoch = Some(blocks_in_epoch);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = BackfillTotalBlocksInstructionArgs {
            epoch: self.instruction.epoch.clone().expect("epoch is not set"),
            blocks_in_epoch: self
                .instruction
                .blocks_in_epoch
                .clone()
                .expect("blocks_in_epoch is not set"),
        };
        let instruction = BackfillTotalBlocksCpi {
            __program: self.instruction.__program,

            cluster_history_account: self
                .instruction
                .cluster_history_account
                .expect("cluster_history_account is not set"),

            config: self.instruction.config.expect("config is not set"),

            oracle_authority: self
                .instruction
                .oracle_authority
                .expect("oracle_authority is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct BackfillTotalBlocksCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    cluster_history_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    oracle_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    epoch: Option<u64>,
    blocks_in_epoch: Option<u32>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
